@startuml


class Type {
    flags: TypeFlags
}
Type *- TypeFlags

enum TypeFlags {
    Any,
    String,
    Number,
    Boolean,
    Void,
    Enum,
    TypeParameter,
    Class,
    Interface,
    Reference,
    Anonymous
}

Type <|-- IntrinsicType
class IntrinsicType {
    intrinsicName: String
}

Type <|-- ObjectType
class ObjectType {
    signatures: Signature[]
}
ObjectType *-- Signature

ObjectType <|-- InterfaceType
class InterfaceType {
    symbol: Symbol
    baseTypes: Type[]
}

InterfaceType <|-- GenericType
class GenericType {
    typeParameters: TypeParameter[]
}

GenericType *-- TypeParameter

Type <|-- TypeParameter
class TypeParameter {
    symbol: Symbol
    constraint: Type
}

Type <|-- GenericTypeReference
class GenericTypeReference {
    target: Type
    typeArguments: Type[]
}

class Signature {
    kind: SignatureKind
    declaration: SignatureDeclaration
}
SignatureKind *- Signature

enum SignatureKind {
    Property,
    Method,
    Construct,
    Index,
    Call
}

Signature <|-- PropertySignature
class PropertySignature {
    symbol: Symbol
}

Signature <|-- CallSignature
class CallSignature {
    typeParameters: TypeParameter[]
    parameters: Parameter[]
    returnType: Type
}

CallSignature *-- Parameter
CallSignature *-- TypeParameter

class Parameter {
    flags: ParameterFlags;
    symbol: Symbol
}
Parameter *-- ParameterFlags

enum ParameterFlags {
    None,
    Optional,
    Rest
}



@enduml